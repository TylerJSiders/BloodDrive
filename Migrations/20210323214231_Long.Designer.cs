// <auto-generated />
using System;
using BloodDriveDonation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BloodDriveDonation.Migrations
{
    [DbContext(typeof(BloodDriveContext))]
    [Migration("20210323214231_Long")]
    partial class Long
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BloodDriveDonation.Models.Accounts", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CanUpdateRecords")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BloodDriveDonation.Models.BloodType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BloodTypes");
                });

            modelBuilder.Entity("BloodDriveDonation.Models.Donator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BloodTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("Elligible")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BloodTypeID");

                    b.ToTable("Donators");
                });

            modelBuilder.Entity("BloodDriveDonation.Models.Record", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDonated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DonatorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DonatorID");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("BloodDriveDonation.Models.Donator", b =>
                {
                    b.HasOne("BloodDriveDonation.Models.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeID");

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("BloodDriveDonation.Models.Record", b =>
                {
                    b.HasOne("BloodDriveDonation.Models.Donator", "Donator")
                        .WithMany()
                        .HasForeignKey("DonatorID");

                    b.Navigation("Donator");
                });
#pragma warning restore 612, 618
        }
    }
}
